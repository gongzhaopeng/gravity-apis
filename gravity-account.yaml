openapi: 3.0.0
info:
  version: "1.0.0"
  title: 'Account Service'
  description: 'Gravity:Account-Service对应的API.'
  contact:
    email: 'gongguochuanqi@gmail.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: Development Environment.
    url: http://gravity.benbenedu.cn:9001/account/genesis
tags:
  - name: Client
    description: 访问客户端.
  - name: Account
    description: 访问账户.
  - name: Me
    description: 访问个人账户.
paths:
  /clients:
    post:
      tags: 
        - Client
      summary: 创建Client.
      description: 创建Client.
      operationId: createClient
      requestBody:
        description: |
          请求创建的Client信息.  
          仅允许在client:inner scope下认证的具有管理员角色的Inner类型的账户调用.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreatingReq'
      responses:
        '201':
          description: 成功创建Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCreatedResp'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
      security:
        - accountCenterAuth: 
          - client:inner
  /clients/{client-id}:
    get:
      tags: 
        - Client
      summary: 获取指定的Client详情.
      description: 获取指定的Client详情.
      operationId: getClientById
      parameters: 
        - name: client-id
          in: path
          description: 指定Client的ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的Client不存在.
      security:
        - accountCenterAuth: 
          - client:inner
    put:
      tags:
        - Client
      summary: 更新指定Client的信息.
      description: |
        更新指定Client的信息.  
        仅允许在client:inner scope下认证的具有管理员角色的Inner类型的账户调用.
      operationId: updateClientById
      parameters: 
        - name: client-id
          in: path
          description: 指定Client的ID
          required: true
          schema:
            type: string
      requestBody:
        description: 请求更新的Client信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdatingReq'
      responses:
        '204':
          description: 更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的Client不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                alteringNotAllowed:
                  value:
                    code: 'AlteringNotAllowed'
                    detail: '${detail}'
                  description: '更改仅在非Abandoned状态下被允许.'
      security:
        - accountCenterAuth: 
          - client:inner
  /clients/{client-id}/state:
    put:
      tags:
        - Client
      summary: 更新指定Client的状态.
      description: |
        更新指定Client的状态.  
        仅允许在client:inner scope下认证的具有管理员角色的Inner类型的账户调用.
      operationId: updateClientStateById
      parameters: 
        - name: client-id
          in: path
          description: 指定Client的ID
          required: true
          schema:
            type: string
      requestBody:
        description: Client状态更新请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientStateUpdatingReq'
      responses:
        '204':
          description: Client状态更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的Client不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                specifiedStateConversionNotAllowed:
                  value:
                    code: 'SpecifiedStateConversionNotAllowed'
                    detail: '${detail}'
                  description: '允许的状态转换路径: Unactivated->{Active,Disabled,Abandoned}, Active->{Disabled,Abandoned}, Disabled->{Active,Abandoned}'
      security:
        - accountCenterAuth: 
          - client:inner
  /accounts:
    post:
      tags: 
        - Account
      summary: 创建Account.
      description: 创建Account.
      operationId: createAccount
      requestBody:
        description: 请求创建的Account信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreatingReq'
      responses:
        '201':
          description: 成功创建Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCreatedResp'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
      security:
        - accountCenterAuth: 
          - client:inner
        - accountCenterAuth: 
          - client:partner
  /accounts/{account-id}:
    get:
      tags: 
        - Account
      summary: 获取指定的Account详情.
      description: | 
        获取指定的Account详情.
      operationId: getAccountById
      parameters: 
        - name: account-id
          in: path
          description: 指定account的ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的Account不存在.
      security:
        - accountCenterAuth: 
          - client:inner
        - accountCenterAuth: 
          - client:partner
    put:
      tags:
        - Account
      summary: 更新指定Account的信息.
      description: |
        更新指定Account的信息.  
        账户未激活时, 允许其它拥有相应权限的账户更新其信息.  
        账户激活后, 仅允许本账户更新自己的信息.
      operationId: updateAccountById
      parameters: 
        - name: account-id
          in: path
          description: 指定account的ID
          required: true
          schema:
            type: string
      requestBody:
        description: 请求更新的Account信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdatingReq'
      responses:
        '204':
          description: 更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的Account不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                alteringNotAllowed:
                  value:
                    code: 'AlteringNotAllowed'
                    detail: '${detail}'
                  description: '更改仅在Unactivated状态下被允许.'
      security:
        - accountCenterAuth: 
          - client:inner
        - accountCenterAuth: 
          - client:partner
  /accounts/{account-id}/state:
    put:
      tags: 
        - Account
      summary: 更新指定Account的状态.
      description: |
        更新指定Account的状态.  
        账户状态更新成功后, 若账户当前处于登录状态, 则将其自动登出.
      operationId: updateAccountStateById
      parameters: 
        - name: account-id
          in: path
          description: 指定account的ID
          required: true
          schema:
            type: string
      requestBody:
        description: Account状态更新请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountStateUpdatingReq'
      responses:
        '204':
          description: Account状态更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的Account不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                specifiedStateConversionNotAllowed:
                  value:
                    code: 'SpecifiedStateConversionNotAllowed'
                    detail: '${detail}'
                  description: '允许的状态转换路径: Unactivated->{Active}, Active->{Locked, Disabled}, Locked->{Active, Disabled}, Disabled->{Active, Locked}'
      security:
        - accountCenterAuth: 
          - client:inner
        - accountCenterAuth: 
          - client:partner
  /accounts/{account-id}/roles:
    put:
      tags: 
        - Account
      summary: 更新指定Account的角色集.
      description: |
        更新指定Account的角色集.  
        账户角色集更新成功后, 若账户当前处于登录状态, 则将其自动登出.
      operationId: updateAccountRolesById
      parameters: 
        - name: account-id
          in: path
          description: 指定account的ID
          required: true
          schema:
            type: string
      requestBody:
        description: Account角色集更新请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRolesUpdatingReq'
      responses:
        '204':
          description: Account角色集更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的Account不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                alteringNotAllowed:
                  value:
                    code: 'AlteringNotAllowed'
                    detail: '${detail}'
                  description: '更改仅在非Abandoned状态下被允许.'
      security:
        - accountCenterAuth: 
          - client:inner
  /signup/code/by/mobile:
    post:
      tags: 
        - Me
      summary: 通过手机获取注册码.
      description: 通过手机获取注册码.
      operationId: getSignupCodeByMobile
      requestBody:
        description: 请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupCodeAcquiringByMobileReq'
      responses:
        '200':
          description: 获取注册码成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupCodeAcquiringByMobileResp'
        '400':
          description: Bad Request.
  /signup/code/by/email:
    post:
      tags: 
        - Me
      summary: 通过邮箱获取注册码.
      description: 通过邮箱获取注册码.
      operationId: getSignupCodeByEmail
      requestBody:
        description: 请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupCodeAcquiringByEmailReq'
      responses:
        '200':
          description: 获取注册码成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupCodeAcquiringByEmailResp'
        '400':
          description: Bad Request.
  /signup/by/code:
    post:
      tags: 
        - Me
      summary: 通过注册码注册账户.
      description: 通过注册码注册账户.
      operationId: signupByCode
      requestBody:
        description: 请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupByCodeReq'
      responses:
        '201':
          description: 注册成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResp'
        '400':
          description: Bad Request.
  /me:
    get:
      tags: 
        - Me
      summary: 获取当前Account详情.
      description: | 
        获取当前Account详情.
      operationId: getMe
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
      security:
        - accountCenterAuth: 
          - client:inner
        - accountCenterAuth: 
          - client:partner
        - accountCenterAuth: 
          - client:public
    put:
      tags: 
        - Me
      summary: 更新当前Account信息.
      description: 更新当前Account信息.
      operationId: updateMe
      requestBody:
        description: 请求更新的Account信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdatingReq'
      responses:
        '204':
          description: 更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                alteringNotAllowed:
                  value:
                    code: 'AlteringNotAllowed'
                    detail: '${detail}'
                  description: '更改仅在Active状态下被允许.'
      security:
        - accountCenterAuth: 
          - client:inner
        - accountCenterAuth: 
          - client:partner
        - accountCenterAuth: 
          - client:public
  /me/password:
    put:
      tags: 
        - Me
      summary: 修改当前Account密码.
      description: |
        修改当前Account密码.
        账户密码更新成功后, 若账户当前处于登录状态, 则将其自动登出.
      operationId: updateMePassword
      requestBody:
        description: 请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MePasswordUpdatingReq'
      responses:
        '204':
          description: 修改成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                alteringNotAllowed:
                  value:
                    code: 'AlteringNotAllowed'
                    detail: '${detail}'
                  description: '密码修改仅在Active状态下被允许.'
      security:
        - accountCenterAuth: 
          - client:inner
        - accountCenterAuth: 
          - client:partner
        - accountCenterAuth: 
          - client:public
  /me/avatar:
    put:
      tags: 
        - Me
      summary: 更新当前Account的avatar.
      description: 更新当前Account的avatar.
      operationId: updateMeAvatar
      requestBody:
        description: 请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeAvatarUpdatingReq'
      responses:
        '204':
          description: 修改成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                alteringNotAllowed:
                  value:
                    code: 'AlteringNotAllowed'
                    detail: '${detail}'
                  description: '头像更新仅在Active状态下被允许.'
      security:
        - accountCenterAuth: 
          - client:inner
        - accountCenterAuth: 
          - client:partner
        - accountCenterAuth: 
          - client:public
components:
  schemas:
    ClientCreatingReq:
      type: object
      description: |
        创建Client的请求信息.  
      properties:
        ownerId:
          $ref: '#/components/schemas/ObjectID'
        scope:
          $ref: '#/components/schemas/ClientScope'
        resourceIds:
          $ref: '#/components/schemas/ClientResourceIds'
        authorizedGrantTypes:
          $ref: '#/components/schemas/ClientAuthorizedGrantTypes'
        registeredRedirectUris:
          $ref: '#/components/schemas/ClientRegisteredRedirectUris'
        autoApproveScopes:
          $ref: '#/components/schemas/ClientAutoApproveScopes'
        authorities:
          $ref: '#/components/schemas/ClientAuthorities'
        accessTokenValiditySeconds:
          $ref: '#/components/schemas/TokenValiditySeconds'
        refreshTokenValiditySeconds:
          $ref: '#/components/schemas/TokenValiditySeconds'
        defaultActive:
          type: boolean
          description: |
            是否缺省激活.
      required: 
        - ownerId
        - scope
        - authorizedGrantTypes
    ClientCreatedResp:
      type: object
      description: Client创建成功时的响应.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
      required: 
        - id
    ClientUpdatingReq:
      type: object
      description: |
        更新Client的请求信息.
      properties:
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        scope:
          $ref: '#/components/schemas/ClientScope'
        resourceIds:
          $ref: '#/components/schemas/ClientResourceIds'
        authorizedGrantTypes:
          $ref: '#/components/schemas/ClientAuthorizedGrantTypes'
        registeredRedirectUris:
          $ref: '#/components/schemas/ClientRegisteredRedirectUris'
        autoApproveScopes:
          $ref: '#/components/schemas/ClientAutoApproveScopes'
        authorities:
          $ref: '#/components/schemas/ClientAuthorities'
        accessTokenValiditySeconds:
          $ref: '#/components/schemas/TokenValiditySeconds'
        refreshTokenValiditySeconds:
          $ref: '#/components/schemas/TokenValiditySeconds'
      required:
        - scope
        - authorizedGrantTypes
    ClientStateUpdatingReq:
      type: object
      description: |
        更新Client状态的请求信息.
      properties:
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        newState:
          $ref: '#/components/schemas/ClientState'
      required:
        - newState
    AccountCreatingReq:
      type: object
      description: |
        创建Account的请求信息.  
        idNumber, mobile, email均可作为账户标识, 均不能被其它账户占用. 在请求中至少要包含一项.
      properties:
        affiliation:
          $ref: '#/components/schemas/AffiliationInAccountCreatingReq'
        idNumber:
          $ref: '#/components/schemas/IdNumber'
        mobile:
          $ref: '#/components/schemas/MobileNumber'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
        type:
          $ref: '#/components/schemas/AccountType'
        name:
          $ref: '#/components/schemas/AccountName'
        nickname:
          $ref: '#/components/schemas/AccountNickname'
        defaultActive:
          type: boolean
          description: 是否缺省激活.
      required: 
        - password
        - type
    AffiliationInAccountCreatingReq:
      type: object
      description: 创建Account的请求中携带的从属信息.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        foreignId:
          $ref: '#/components/schemas/AccountAffiliationForeignId'
      required: 
        - id
    AccountCreatedResp:
      type: object
      description: Account创建成功时的响应.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
      required: 
        - id
    AccountUpdatingReq:
      type: object
      description: |
        更新Account的请求信息.
      properties:
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        name:
          $ref: '#/components/schemas/AccountName'
        nickname:
          $ref: '#/components/schemas/AccountNickname'
        gender:
          $ref: '#/components/schemas/Gender'
        birthday:
          $ref: '#/components/schemas/Birthday'
        address:
          $ref: '#/components/schemas/AccountAddress'
    AccountStateUpdatingReq:
      type: object
      description: |
        更新账户状态的请求信息.
      properties:
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        newState:
          $ref: '#/components/schemas/AccountState'
      required:
        - newState
    AccountRolesUpdatingReq:
      type: object
      description: |
        更新账户角色集的请求信息.
      properties:
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        newRoles:
          $ref: '#/components/schemas/AccountRoles'
      required:
        - newRoles
    SignupCodeAcquiringByMobileReq:
      type: object
      description: |
        获取手机注册验证码的请求信息.
      properties:
        mobile:
          $ref: '#/components/schemas/MobileNumber'
      required:
        - mobile
    SignupCodeAcquiringByMobileResp:
      type: object
      description: |
        获取手机注册验证码成功时的响应.
      properties:
        receivingMobile:
          $ref: '#/components/schemas/MobileNumber'
        expiresIn:
          type: integer
          format: int32
      required:
        - receivingMobile
        - expiresIn
    SignupCodeAcquiringByEmailReq:
      type: object
      description: |
        获取邮箱注册验证码的请求信息.
      properties:
        email:
          $ref: '#/components/schemas/Email'
      required:
        - email
    SignupCodeAcquiringByEmailResp:
      type: object
      description: |
        获取邮箱注册验证码成功时的响应.
      properties:
        receivingEmail:
           $ref: '#/components/schemas/Email'
        expiresIn:
          type: integer
          format: int32
      required:
        - receivingEmail
        - expiresIn
    SignupByCodeReq:
      type: object
      description: |
        通过注册码注册的请求信息.
      properties:
        identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        code:
          $ref: '#/components/schemas/SignupCode'
        password:
          $ref: '#/components/schemas/Password'
        type:
          $ref: '#/components/schemas/AccountType'
        name:
          $ref: '#/components/schemas/AccountName'
        nickname:
          $ref: '#/components/schemas/AccountNickname'
      required:
        - identifier
        - code
        - password
        - type
    SignupResp:
      type: object
      description: |
        注册成功时的响应.
      properties:
        identifier:
          $ref: '#/components/schemas/AccountIdentifier'
      required: 
        - identifier
    MePasswordUpdatingReq:
      type: object
      description: |
        更新当前账户的密码.
      properties:
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        oldPassword:
          $ref: '#/components/schemas/Password'
        newPassword:
          $ref: '#/components/schemas/Password'
      required:
        - oldPassword
        - newPassword
    MeAvatarUpdatingReq:
      type: object
      description: |
        更新当前账户的avatar.
      properties:
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        newAvatar:
          $ref: '#/components/schemas/URL'
      required:
        - newAvatar
    Client:
      type: object
      description: 客户端.
      externalDocs: 
        description: ClientDetails implementation.
        url: 'https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/BaseClientDetails.java'
      properties:
        clientId:
          $ref: '#/components/schemas/ObjectID'
        createTime:
          $ref: '#/components/schemas/Timestamp'
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        creator:
          $ref: '#/components/schemas/AccountBrief'
        state:
          $ref: '#/components/schemas/ClientState'
        owner:
          $ref: '#/components/schemas/AccountBrief'
        clientSecret:
          type: string
          description: 'The client secret.'
        scope:
          $ref: '#/components/schemas/ClientScope'
        resourceIds:
          $ref: '#/components/schemas/ClientResourceIds'
        authorizedGrantTypes:
          $ref: '#/components/schemas/ClientAuthorizedGrantTypes'
        registeredRedirectUris:
          $ref: '#/components/schemas/ClientRegisteredRedirectUris'
        autoApproveScopes:
          $ref: '#/components/schemas/ClientAutoApproveScopes'
        authorities:
          $ref: '#/components/schemas/ClientAuthorities'
        accessTokenValiditySeconds:
          $ref: '#/components/schemas/TokenValiditySeconds'
        refreshTokenValiditySeconds:
          $ref: '#/components/schemas/TokenValiditySeconds'
      required: 
        - clientId
        - createTime
        - lUTime
        - creator
        - state
        - owner
        - clientSecret
        - scope
        - authorizedGrantTypes
    ClientAuthorities:
      type: array
      description: 'The authorities that are granted to the OAuth client.'
      items:
        type: string
        minLength: 1
        maxLength: 50
      minLength: 1
      maxLength: 50
    ClientAutoApproveScopes:
      type: array
      description: "The scopes to auto-approve."
      items:
        $ref: '#/components/schemas/ClientScopeItem'
      minLength: 1
      maxLength: 5
    ClientRegisteredRedirectUris:
      type: array
      description: 'The pre-defined redirect URI for the client to use during the "authorization_code" access grant. See OAuth spec, section 4.1.1.'
      items:
        $ref: '#/components/schemas/URL'
      minLength: 1
      maxLength: 10
    ClientAuthorizedGrantTypes:
      type: array
      description: "The grant types for which the client is authorized."
      items:
        $ref: '#/components/schemas/GrantType'
      minLength: 1
      maxLength: 4
    GrantType:
      type: string
      description: Grant type.
      enum:
        - password
        - client_credentials
        - authorization_code
        - implicit
      minLength: 1
      maxLength: 50
    ClientResourceIds:
      type: array
      description: Client resource IDs.
      items:
        $ref: '#/components/schemas/ResourceId'
      minLength: 1
      maxLength: 50
    ResourceId:
      type: string
      description: Resource ID.
      enum:
        - ACCOUNT_API
      minLength: 1
      maxLength: 50
    ClientScope:
      type: array
      description: Client scope.
      items:
        $ref: '#/components/schemas/ClientScopeItem'
      minLength: 1
      maxLength: 10
    ClientScopeItem:
      type: string
      description: Client scope item.
      enum:
        - client:inner
        - client:partner
        - client:public
      minLength: 1
      maxLength: 50
    ClientState:
      type: string
      description: 客户端状态.
      enum:
        - Unactivated
        - Active
        - Disabled
        - Abandoned
      minLength: 1
      maxLength: 50
    AccountIdentifier:
      type: object
      description: 账户标识.
      properties:
        type:
          $ref: '#/components/schemas/AccountIdentifierType'
        text:
          $ref: '#/components/schemas/AccountIdentifierText'
      required:
        - AccountIdentifierType
        - AccountIdentifierText
    AccountIdentifierType:
      type: string
      description: 账户标识的类型.
      enum:
        - IdNumber
        - Mobile
        - Email
      minLength: 1
      maxLength: 50
    AccountIdentifierText:
      type: string
      description: 账户标识文本.
      minLength: 1
      maxLength: 50
    Account:
      type: object
      description: |
        账户.  
        idNumber, mobile, email, wechat均只能对应到至多一个账户, 故均可以作为账号的标识.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        createTime:
          $ref: '#/components/schemas/Timestamp'
        lUTime:
          $ref: '#/components/schemas/Timestamp'
        creator:
          $ref: '#/components/schemas/AccountBrief'
        state:
          $ref: '#/components/schemas/AccountState'
        affiliation:
          $ref: '#/components/schemas/AccountAffiliation'
        idNumber:
          $ref: '#/components/schemas/IdNumber'
        identified:
          type: boolean
          description: 是否已通过实名认证.
        mobile:
          $ref: '#/components/schemas/MobileNumber'
        mobileVerified:
          type: boolean
          description: 手机是否已通过认证.
        email:
          $ref: '#/components/schemas/Email'
        emailVerified:
          type: boolean
          description: 邮箱是否已通过认证.
        password:
          $ref: '#/components/schemas/Password'
        wechat:
          $ref: '#/components/schemas/WechatInfo'
        type:
          $ref: '#/components/schemas/AccountType'
        name:
          $ref: '#/components/schemas/AccountName'
        nickname:
          $ref: '#/components/schemas/AccountNickname'
        gender:
          $ref: '#/components/schemas/Gender'
        birthday:
          $ref: '#/components/schemas/Birthday'
        address:
          $ref: '#/components/schemas/AccountAddress'
        avatar:
          $ref: '#/components/schemas/URL'
        roles:
          $ref: '#/components/schemas/AccountRoles'
      required: 
        - id
        - createTime
        - lUTime
        - creator
        - state
        - type
        - roles
    AccountRoles:
      type: array
      description: 账户角色集.
      items:
        $ref: '#/components/schemas/AccountRole'
      minLength: 1
      maxLength: 25
    AccountAddress:
      type: object
      description: 账户地址.
      properties:
        country:
          $ref: '#/components/schemas/Country'
        region:
          $ref: '#/components/schemas/Region'
        locality:
          $ref: '#/components/schemas/Locality'
      required:
        - country
        - region
        - locality
    AccountState:
      type: string
      description: 账户状态.
      enum:
        - Unactivated
        - Active
        - Locked
        - Disabled
        - Abandoned
      minLength: 1
      maxLength: 50
    AccountType:
      type: string
      description: 账户类型.
      enum:
        - Personal
        - Organization
        - AgencyL3
        - AgencyL2
        - AgencyL1
        - Inner
      minLength: 1
      maxLength: 50
    AccountRole:
      type: string
      description: 账户角色.
      enum:
        - Normal
        - God
        - SuperAdmin
        - Admin
        - QuestionBuilder
        - ExamPaperBuilder
        - ExamBuilder
        - Grader
        - Analyst
      minLength: 1
      maxLength: 50
    WechatInfo:
      type: object
      description: 账户关联的微信信息.
      properties:
        openid:
          type: string
        unionid:
          type: string
        latestLogin:
          $ref: '#/components/schemas/WechatLogin'
    WechatLogin:
      type: object
      description: 微信登录信息.
      properties:
        loginAt:
          $ref: '#/components/schemas/Timestamp'
        accessToken:
          type: string
        expiresAt:
          $ref: '#/components/schemas/Timestamp'
        refreshToken:
          type: string
    AccountBrief:
      type: object
      description: 账户的简单信息.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        name:
          $ref: '#/components/schemas/AccountName'
        nickname:
          $ref: '#/components/schemas/AccountNickname'
      required: 
        - id
    AccountAffiliation:
      type: object
      description: 账户从属关系.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        name:
          $ref: '#/components/schemas/AccountName'
        nickname:
          $ref: '#/components/schemas/AccountNickname'
        foreignId:
          $ref: '#/components/schemas/AccountAffiliationForeignId'
      required: 
        - id
    AccountAffiliationForeignId:
      type: string
      description: 账户从属关系里的外部ID.
      minLength: 1
      maxLength: 128
    AccountName:
      type: string
      description: 账户名.
      minLength: 1
      maxLength: 50
    AccountNickname:
      type: string
      description: 账户昵称.
      minLength: 1
      maxLength: 25
    SignupCode:
      type: string
      description: 注册验证码.
      minLength: 6
      maxLength: 6
    Birthday:
      type: string
      format: date
      description: 生日.
    TokenValiditySeconds:
      type: integer
      description: 'The token validity period.'
      format: int32
    IdNumber:
      type: string
      description: 身份证号.
      minLength: 1
      maxLength: 25
    MobileNumber:
      type: string
      description: 手机号码.
      minLength: 1
      maxLength: 25
    Country:
      type: string
      description: |
        The country. For example, USA. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
      enum:
        - CN
      minLength: 2
      maxLength: 2
    Region:
      type: string
      description: |
        The region in which the locality is, and which is in the country. For example, California or another appropriate first-level Administrative division.
        在中国对应省.
      minLength: 1
      maxLength: 50
    Locality:
      type: string
      description: |
        The locality in which the street address is, and which is in the region. For example, Mountain View.
        在中国对应市.
      minLength: 1
      maxLength: 50
    URL:
      type: string
      description: URL.
      minLength: 1
      maxLength: 250
    Email:
      type: string
      description: Email.
      minLength: 5
      maxLength: 50
    Password:
      type: string
      format: password
      description: Password.
      minLength: 6
      maxLength: 50
    Gender:
      type: string
      description: 性取向.
      enum:
        - Masculine
        - Feminine
        - Neutral
      minLength: 1
      maxLength: 50
    Timestamp:
      type: integer
      format: int64
      description: 时间戳.
    ObjectID:
      type: string
      description: MongoDB:ObjectId
      minLength: 24
      maxLength: 24
    ErrorResponse:
      description: 错误响应.
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ErrorResponseCode'
        detail:
          type: string
          description: 错误详情.
      required:
        - code
    ErrorResponseCode:
      type: string
      description: 错误码.
      enum: 
        - Undefined
        - LUTimeConflict
        - AlteringNotAllowed
        - SpecifiedStateConversionNotAllowed
        
        
  securitySchemes:
    accountCenterAuth:
      type: oauth2
      flows:
        password:
          tokenUrl: "http://gravity.benbenedu.cn:9001/account/oauth/token"
          scopes:
            'client:inner': 内部客户端
            'client:partner': 合作方客户端
            'client:public': 公开的客户端
